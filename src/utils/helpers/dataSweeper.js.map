{"version":3,"file":"dataSweeper.js","sourceRoot":"","sources":["dataSweeper.ts"],"names":[],"mappings":"AACA,OAAO,IAAI,MAAM,WAAW,CAAC;AAC7B,OAAO,EAAE,MAAM,EAAuB,MAAM,aAAa,CAAC;AAO1D;;;;GAIG;AACH,KAAK,UAAU,UAAU,CAAC,UAAuC,EAAE,OAAY;IAC7E,IAAI,CAAC,UAAU;QAAE,OAAO,CAAC,CAAC;IAC1B,IAAI,KAAK,GAAG,CAAC,CAAC;IACd,IAAI,KAAK,EAAE,MAAM,GAAG,IAAI,UAAU,CAAC,IAAI,EAAE,EAAE;QACzC,IAAI,OAAO,CAAC,GAAG,CAAC,EAAE;YAChB,MAAM,UAAU,CAAC,SAAS,CAAC,EAAE,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC;YAC7C,KAAK,EAAE,CAAC;SACT;KACF;IAED,OAAO,KAAK,CAAC;AACf,CAAC;AAED;;;GAGG;AACH,MAAM,UAAU,WAAW,CAAC,MAAsB,EAAE,UAAsB;IACxE,MAAM,CAAC,IAAI,CAAC,8BAA8B,CAAC,CAAC;IAC5C,IAAI,CAAC,QAAQ,CACX,YAAY,EACZ,KAAK,IAAI,EAAE;QACT,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE;YAAE,MAAM,CAAC,IAAI,CAAC,qCAAqC,CAAC,CAAC;aACrE,IAAI,MAAM,CAAC,OAAO,EAAE;YAAE,MAAM,KAAK,CAAC,MAAM,EAAE,UAAU,CAAC,CAAC;IAC7D,CAAC,EACD;QACE,SAAS,EAAE,IAAI;QACf,QAAQ,EAAE,eAAe;KAC1B,CACF,CAAC;AACJ,CAAC;AAED;;;;GAIG;AACH,KAAK,UAAU,KAAK,CAAC,MAAsB,EAAE,UAAsB;IACjE,MAAM,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;IAEjC,MAAM,IAAI,GAAe,CAAC,CAAC,YAAY,EAAE,SAAS,CAAC,CAAC,CAAC;IAErD,MAAM,WAAW,GAAgC;QAC/C,aAAa,EAAE,EAAE,OAAO,EAAE,CAAC,GAAQ,EAAE,EAAE,CAAC,GAAG,CAAC,QAAQ,IAAI,CAAC,EAAE,KAAK,EAAE,SAAS,EAAE;QAC7E,WAAW,EAAE;YACX,OAAO,EAAE,CAAC,GAAQ,EAAE,EAAE,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,OAAO,CAAC;YAC5D,KAAK,EAAE,QAAQ;SAChB;QACD,iBAAiB,EAAE;YACjB,OAAO,EAAE,CAAC,GAAQ,EAAE,EAAE,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,OAAO,CAAC;YAC5D,KAAK,EAAE,aAAa;SACrB;QACD,WAAW,EAAE;YACX,OAAO,EAAE,CAAC,GAAQ,EAAE,EAAE,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,OAAO,CAAC;YAC5D,KAAK,EAAE,QAAQ;SAChB;KACF,CAAC;IAEF,KAAK,MAAM,CAAC,IAAI,EAAE,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,EAAE;QACpE,MAAM,UAAU,GAAG,UAAU,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;QAChD,MAAM,KAAK,GAAG,MAAM,UAAU,CAAC,UAAU,EAAE,OAAO,CAAC,CAAC;QACpD,IAAI,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,GAAG,KAAK,SAAS,CAAC,CAAC,CAAC;KACvC;IAED,MAAM,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,IAAI,EAAE,EAAE,0BAA0B,CAAC,CAAC;AAC3D,CAAC","sourcesContent":["import type { Connection, Collection } from \"mongoose\";\nimport cron from \"node-cron\";\nimport { logger, type ExtendedClient } from \"../index.js\";\n\ntype ICollection = {\n  label: string;\n  queryFn(doc: any): boolean;\n};\n\n/**\n * @param collection - The collection to delete from\n * @param queryFn - The function to query the collection with\n * @returns The number of documents deleted\n */\nasync function deleteDocs(collection: Collection<any> | undefined, queryFn: any) {\n  if (!collection) return 0;\n  let count = 0;\n  for await (const doc of collection.find()) {\n    if (queryFn(doc)) {\n      await collection.deleteOne({ _id: doc._id });\n      count++;\n    }\n  }\n\n  return count;\n}\n\n/**\n * @param client - The client to use\n * @param connection - The mongoose connection to use\n */\nexport function sweeperLoop(client: ExtendedClient, connection: Connection) {\n  logger.info(\"Starting database sweep loop\");\n  cron.schedule(\n    \"0 12 * * 6\",\n    async () => {\n      if (!client.isReady()) logger.warn(\"Client is not ready, skipping sweep\");\n      else if (client.isReady()) await sweep(client, connection);\n    },\n    {\n      scheduled: true,\n      timezone: \"Europe/London\",\n    }\n  );\n}\n\n/**\n * @param client - The client to use\n * @param connection - The mongoose connection to use\n * @internal\n */\nasync function sweep(client: ExtendedClient, connection: Connection): Promise<void> {\n  logger.info(\"Sweeping database\");\n\n  const info: string[][] = [[\"Collection\", \"Deleted\"]];\n\n  const collections: Record<string, ICollection> = {\n    economymodels: { queryFn: (doc: any) => doc.NetWorth <= 0, label: \"Economy\" },\n    levelmodels: {\n      queryFn: (doc: any) => !client.guilds.cache.get(doc.GuildId),\n      label: \"Levels\",\n    },\n    infractionsmodels: {\n      queryFn: (doc: any) => !client.guilds.cache.get(doc.GuildId),\n      label: \"Infractions\",\n    },\n    guildmodels: {\n      queryFn: (doc: any) => !client.guilds.cache.get(doc.GuildId),\n      label: \"Guilds\",\n    },\n  };\n\n  for (const [name, { queryFn, label }] of Object.entries(collections)) {\n    const collection = connection.collections[name];\n    const count = await deleteDocs(collection, queryFn);\n    info.push([label, `${count} guilds`]);\n  }\n\n  logger.info({ table: info }, \"Database sweep completed\");\n}\n"]}