{"version":3,"file":"useItem.js","sourceRoot":"","sources":["useItem.ts"],"names":[],"mappings":"AASA;;;;;;GAMG;AACH,MAAM,YAAY,GAAmB;IACnC,WAAW,EAAE,KAAK,EAAE,WAAwC,EAAE,IAAW,EAAE,IAAS,EAAE,EAAE;QACtF,MAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,IAAK,CAAC,GAAG,CAAC,CAAC;QAErD,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC/B,IAAI,CAAC,MAAM,IAAI,MAAM,CAAC;QACtB,IAAI,CAAC,QAAQ,IAAI,MAAM,CAAC;QAExB,OAAO,WAAW,CAAC,KAAK,CAAC;YACvB,OAAO,EAAE,cAAc,IAAI,CAAC,IAAI,sBAAsB,MAAM,aAAa;YACzE,SAAS,EAAE,IAAI;SAChB,CAAC,CAAC;IACL,CAAC;IACD,OAAO,EAAE,KAAK,EAAE,WAAwC,EAAE,IAAW,EAAE,IAAS,EAAE,EAAE;QAClF,QAAQ,IAAI,CAAC,IAAI,EAAE;YACjB,KAAK,SAAS;gBACZ,IAAI,CAAC,UAAU,GAAG,GAAG,CAAC;gBACtB,MAAM;YACR,KAAK,eAAe;gBAClB,IAAI,CAAC,UAAU,GAAG,CAAC,CAAC;gBACpB,MAAM;YACR,KAAK,eAAe;gBAClB,IAAI,CAAC,UAAU,GAAG,GAAG,CAAC;gBACtB,MAAM;YACR,KAAK,cAAc;gBACjB,IAAI,CAAC,UAAU,GAAG,CAAC,CAAC;gBACpB,MAAM;YACR,KAAK,cAAc;gBACjB,IAAI,CAAC,UAAU,GAAG,GAAG,CAAC;gBACtB,MAAM;SACT;QAED,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAE/B,OAAO,WAAW,CAAC,KAAK,CAAC;YACvB,OAAO,EAAE,kBAAkB,IAAI,CAAC,IAAI,qCAAqC,IAAI,CAAC,UAAU,IAAI;YAC5F,SAAS,EAAE,IAAI;SAChB,CAAC,CAAC;IACL,CAAC;CACF,CAAC;AAEF;;;;;;;;;;;;;;;;;;GAkBG;AACH,MAAM,CAAC,KAAK,UAAU,OAAO,CAAC,WAAwC,EAAE,IAAW,EAAE,IAAc;IACjG,MAAM,OAAO,GAAG,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC;IACtD,IAAI,OAAO,EAAE;QACX,OAAO,OAAO,CAAC,WAAW,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;KACzC;SAAM;QACL,OAAO,WAAW,CAAC,KAAK,CAAC;YACvB,OAAO,EAAE,wBAAwB,IAAI,CAAC,IAAI,EAAE;YAC5C,SAAS,EAAE,IAAI;SAChB,CAAC,CAAC;KACJ;AACH,CAAC","sourcesContent":["import type { ChatInputCommandInteraction, InteractionResponse } from \"discord.js\";\nimport type { Document } from \"mongoose\";\nimport type { IItem } from \"../index.js\";\n\ntype ItemHandlerMap = Record<\n  string,\n  (interaction: ChatInputCommandInteraction, item: IItem, data: any) => Promise<InteractionResponse<boolean>>\n>;\n\n/**\n * @experimental\n * @param interaction - The chat input command interaction to handle\n * @param item - The item to use, as an IItem\n * @param data - The user's data, as a mongoose Document\n * @returns An interaction reply, with either a success or error message\n */\nconst itemHandlers: ItemHandlerMap = {\n  placeholder: async (interaction: ChatInputCommandInteraction, item: IItem, data: any) => {\n    const reward = Math.floor(Math.random() * 1_000) + 1;\n\n    data.Inventory[item.name] -= 1;\n    data.Wallet += reward;\n    data.NetWorth += reward;\n\n    return interaction.reply({\n      content: `You used \\`${item.name}\\` and received \\`â‚³${reward}\\` bobbucks`,\n      ephemeral: true,\n    });\n  },\n  chicken: async (interaction: ChatInputCommandInteraction, item: IItem, data: any) => {\n    switch (item.name) {\n      case \"Chicken\":\n        data.Multiplier = 1.2;\n        break;\n      case \"Super Chicken\":\n        data.Multiplier = 2;\n        break;\n      case \"Ultra Chicken\":\n        data.Multiplier = 2.5;\n        break;\n      case \"Mega Chicken\":\n        data.Multiplier = 3;\n        break;\n      case \"Giga Chicken\":\n        data.Multiplier = 3.5;\n        break;\n    }\n\n    data.Inventory[item.name] -= 1;\n\n    return interaction.reply({\n      content: `You equipped \\`${item.name}\\` and received a multiplier of \\`${data.Multiplier}\\``,\n      ephemeral: true,\n    });\n  },\n};\n\n/**\n * @experimental\n * @param interaction - The chat input command interaction to handle\n * @param item - The item to use, as an IItem\n * @param data - The user's data, as a mongoose Document\n * @returns An interaction reply, with either a success or error message\n * @example\n * ```\n * const data = await EconomyModel.findOne({\n *  UserId: interaction.user.id,\n * });\n * if (!data) return;\n *\n * const item = await requestItemData(itemInput);\n * if (!item?.usable) return;\n *\n * await useItem(interaction, item, data).catch((error) => { ... });\n * ```\n */\nexport async function useItem(interaction: ChatInputCommandInteraction, item: IItem, data: Document) {\n  const handler = itemHandlers[item.name.toLowerCase()];\n  if (handler) {\n    return handler(interaction, item, data);\n  } else {\n    return interaction.reply({\n      content: `You cannot use item: ${item.name}`,\n      ephemeral: true,\n    });\n  }\n}\n"]}