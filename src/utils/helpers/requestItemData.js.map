{"version":3,"file":"requestItemData.js","sourceRoot":"","sources":["requestItemData.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,SAAS,CAAC;AAGzB;;;GAGG;AACH,MAAM,CAAC,KAAK,UAAU,eAAe,CAAC,EAAU;IAC9C,MAAM,IAAI,GAAG,MAAM,IAAI,OAAO,CAAS,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;QACzD,EAAE,CAAC,QAAQ,CAAC,wBAAwB,EAAE,MAAM,EAAE,CAAC,KAAK,EAAE,IAAI,EAAE,EAAE;YAC5D,IAAI,KAAK;gBAAE,MAAM,CAAC,KAAK,CAAC,CAAC;;gBACpB,OAAO,CAAC,IAAI,CAAC,CAAC;QACrB,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAY,CAAC;IAC1C,OAAO,KAAK,CAAC,IAAI,CAAC,CAAC,IAAW,EAAE,EAAE,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,CAAC,WAAW,EAAE,CAAC,UAAU,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC,CAAC;AAC1F,CAAC","sourcesContent":["import fs from \"node:fs\";\nimport type { IItem } from \"../index.js\";\n\n/**\n * @param id - The id of the item to get\n * @returns The item data, or undefined if not found\n */\nexport async function requestItemData(id: string): Promise<IItem | undefined> {\n  const data = await new Promise<string>((resolve, reject) => {\n    fs.readFile(\"./resources/items.json\", \"utf8\", (error, data) => {\n      if (error) reject(error);\n      else resolve(data);\n    });\n  });\n\n  const items = JSON.parse(data) as IItem[];\n  return items.find((item: IItem) => item.id === id.toLowerCase().replaceAll(/\\s+/g, \"\"));\n}\n"]}