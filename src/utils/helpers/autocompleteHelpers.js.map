{"version":3,"file":"autocompleteHelpers.js","sourceRoot":"","sources":["autocompleteHelpers.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,SAAS,CAAC;AACzB,OAAO,EAAE,aAAa,EAAE,GAAG,EAAE,MAAM,UAAU,CAAC;AAC9C,OAAO,QAAQ,MAAM,UAAU,CAAC;AAChC,OAAO,EAAE,eAAe,EAAE,MAAM,aAAa,CAAC;AAE9C;;GAEG;AACH,MAAM,UAAU,aAAa;IAC3B,OAAO,EAAE;SACN,WAAW,CAAC,qBAAqB,CAAC;SAClC,MAAM,CAAC,CAAC,IAAY,EAAE,EAAE,CAAC,CAAC,kBAAkB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SACxD,MAAM,CAAC,CAAC,IAAY,EAAE,EAAE,CAAC,IAAI,KAAK,cAAc,CAAC;SACjD,GAAG,CAAC,CAAC,MAAc,EAAE,EAAE,CAAC,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,CAAC,CAAC,CAAC;AAChE,CAAC;AAED;;;;;;;GAOG;AACH,MAAM,CAAC,KAAK,UAAU,WAAW;IAC/B,MAAM,OAAO,GAAa,EAAE,CAAC;IAE7B,IAAI,KAAK,EAAE,MAAM,GAAG,IAAI,QAAQ,CAAC,aAAa,CAAC,IAAI,GAAG,CAAC,GAAG,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC,EAAE;QAC5G,UAAU,EAAE,CAAC,MAAM,CAAC;KACrB,CAAC,EAAE;QACF,MAAM,MAAM,GAAG,0BAA0B,CAAC,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE,QAAQ,EAAE,CAAC;QACzE,MAAM,QAAQ,GAAG,GAAG,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;QAC5C,IAAI,CAAC,MAAM,IAAI,CAAC,QAAQ;YAAE,SAAS;QAEnC,OAAO,CAAC,IAAI,CAAC,GAAG,eAAe,CAAC,MAAM,CAAC,KAAK,eAAe,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;KAC1E;IAED,OAAO,OAAO,CAAC;AACjB,CAAC","sourcesContent":["import fs from \"node:fs\";\nimport { fileURLToPath, URL } from \"node:url\";\nimport readdirp from \"readdirp\";\nimport { capitalizeFirst } from \"../index.js\";\n\n/**\n * @returns Categories in an array of objects\n */\nexport function getCategories() {\n  return fs\n    .readdirSync(\"./dist/interactions\")\n    .filter((item: string) => !/(?:^|\\/)\\.[^./]/g.test(item))\n    .filter((item: string) => item !== \"context-menu\")\n    .map((choice: string) => ({ name: choice, value: choice }));\n}\n\n/**\n * @returns A list of all the commands in an array formatted for the autocomplete interaction\n * @example\n * ```\n * const commands = await getCommands();\n * console.log(commands); // [\"Information: Avatar\", \"Information: Botinfo\", etc..]\n * ```\n */\nexport async function getCommands() {\n  const entries: string[] = [];\n\n  for await (const dir of readdirp(fileURLToPath(new URL(`${/.*\\/dist/.exec(import.meta.url)}/interactions/`)), {\n    fileFilter: [\"*.js\"],\n  })) {\n    const parent = /(?<=\\/)[^/]+(?=\\/[^/]+$)/.exec(dir.fullPath)?.toString();\n    const basename = dir.basename.split(\".\")[0];\n    if (!parent || !basename) continue;\n\n    entries.push(`${capitalizeFirst(parent)}: ${capitalizeFirst(basename)}`);\n  }\n\n  return entries;\n}\n"]}